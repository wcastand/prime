{"version":3,"file":"static/webpack/static/development/pages/index.js.ea4125e4c0e068d2014f.hot-update.js","sources":["webpack:///./src/utils.js"],"sourcesContent":["// estimate limit to find n prime\n// https://en.wikipedia.org/wiki/Prime_number_theorem#Approximations_for_the_nth_prime_number\nfunction estimateLimit(n) {\n  return n >= 6 ? parseInt(n * (Math.log(n) + Math.log(Math.log(n)))) : null\n}\n\n// sieve of Atkin algo\n// https://www.geeksforgeeks.org/sieve-of-atkin/\n// https://en.wikipedia.org/wiki/Generating_primes\n/* Mark siev[n] is true if one\n      of the following is true:\n  a) n = (4*x*x)+(y*y) has odd number of\n      solutions, i.e., there exist\n      odd number of distinct pairs (x, y)\n      that satisfy the equation and\n      n % 12 = 1 or n % 12 = 5.\n  b) n = (3*x*x)+(y*y) has odd number of\n      solutions and n % 12 = 7\n  c) n = (3*x*x)-(y*y) has odd number of\n      solutions, x > y and n % 12 = 11\n*/\nfunction atkin(limit) {\n  const sieve = new Array(limit).fill(false)\n\n  for (let x = 0; x * x < limit; x++) {\n    for (let y = 0; y * y < limit; y++) {\n      let n = 4 * x * x + y * y\n      if (n <= limit && (n % 12 == 1 || n % 12 == 5)) sieve[n] = true\n\n      n = 3 * x * x + y * y\n      if (n <= limit && n % 12 == 7) sieve[n] = true\n\n      n = 3 * x * x - y * y\n      if (x > y && n <= limit && n % 12 == 11) sieve[n] = true\n    }\n  }\n  for (let r = 5; r * r < limit; r++) {\n    if (sieve[r]) for (let i = r * r; i < limit; i += r * r) sieve[i] = false\n  }\n\n  const res = [2, 3]\n  for (let a = 5; a < limit; a++) {\n    if (sieve[a]) res.push(a)\n  }\n  return res\n}\n\nexport function generatePrime(n) {\n  const limit = estimateLimit(n)\n  if (limit === null) {\n    const basePrime = [2, 3, 5, 7, 11]\n    return basePrime.splice(0, n)\n  }\n  const res = atkin(limit)\n  return res.splice(0, n)\n}\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;;;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;A","sourceRoot":""}